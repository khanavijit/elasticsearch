/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.avijit.projects.elasticsearch.api;

import com.avijit.projects.elasticsearch.document.Ticket;
import com.avijit.projects.elasticsearch.service.TicketService;
import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;


@RestController
@RequestMapping(path = "v1")
@Api(value = "TicketApi", tags = "default")
@RequiredArgsConstructor
@Slf4j
@Validated
public class SearchApi {

    private final TicketService ticketService;

    /**
     * GET /search : seaerches the user support tickets
     *
     * @param attribute The name of the attribute that is been searched (required)
     * @param value The value to find (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "seaerches the user support tickets", nickname = "search", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @GetMapping(
        value = "/search"
    )
     ResponseEntity<Flux<Ticket>> search(@NotNull
                                         @ApiParam(value = "The name of the attribute that is been searched", required = true)
                                         @Valid @RequestParam(value = "attribute", required = true)
                                                 String attribute,
                                         @NotNull @ApiParam(value = "The value to find", required = true)
                                         @Valid
                                         @RequestParam(value = "value", required = true)
                                                 String value) {

       // log.info(">>> search {} as {}", attribute,value);
        return ResponseEntity.ok(ticketService.getAllTickets());

    }


    @ApiOperation(value = "Data Preparation", nickname = "bulkInsert", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation") })
    @GetMapping(
            value = "/insert"
    )
    ResponseEntity<String> insert() {

        // log.info(">>> search {} as {}", attribute,value);

        ticketService.bulkInsert();
        return ResponseEntity.ok("{\"Result\" : \"Success\"}");

    }

    @PostMapping
    public Mono<Ticket> addTicket(@RequestBody Ticket ticket) {
        return ticketService.addTicket(ticket);
    }

}
